#!/usr/bin/env python3
# File: mbta2rss
# Description: This pulls down all the MBTA alerts and prints them out.
# Author: Ben O'Neill <ben@benoneill.xyz>
# Copyright: Copyright (C) 2019-2020 Ben O'Neill <benoneill.xyz>. Licensed under
# the GNU GPL v3.

import argparse
import requests

API_URL = 'https://api-v3.mbta.com/'
DEFAULT_TITLE = 'Unofficial MBTA Alert Feed'
DEFAULT_DESC = 'An unofficial feed for public transit alerts in the Boston area'
DEFAULT_LANG = 'en_us'
DEFAULT_URL = 'https://github.com/swegbun/mbta-rss'

class MarkdownDriver:
    def __init__(self, title=DEFAULT_TITLE, desc=DEFAULT_DESC,
            lang=DEFAULT_LANG, url=DEFAULT_URL):
        self.title = title
        self.desc = desc
        self.lang = lang
        self.url = url
    
    def print_start(self):
        print('# ' + title)
        print(desc)

    def print_item(self, title, header, desc='', effect='', date='', categories=[]):
        print('## ' + title + ' (' + date + ')' + '\n*' + header + '*\n\n')
        print(desc.replace('\n', '\n\n') + '\n\n')

    def print_end(self):
        pass

class RSSDriver:
    def __init__(self, title=DEFAULT_TITLE, desc=DEFAULT_DESC,
            lang=DEFAULT_LANG, url=DEFAULT_URL):
        self.title = title
        self.desc = desc
        self.lang = lang
        self.url = url

    def print_start(self):
        print('<?xml version="1.0" encoding="utf-8"?>')
        print('<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">')
        print('<channel>')
        print('<title>' + self.title + '</title>')
        print('<description>' + self.desc + '</description>')
        print('<language>' + self.lang + '</language>')
        print('<link>' + self.url + '</link>')

    def print_item(self, title, header, desc='', effect='', date='',
            categories=[]):
        cdata = '<h2>' + header + '</h2>' + '<h3>' + desc + '</h3>' + '<p>' + effect + '</p>'

        print('<item>')
        print('<title>' + title + '</title>')
        print('<description><![CDATA[' + cdata + ']]></description>')
        print('<pubDate>' + date + '</pubDate>')
        for category in categories:
            print('<category>' + category + '</category>')
        print('</item>')


    def print_end(self):
        print('</channel>')
        print('</rss>')


def retrieve_from_api(req):
    return requests.get('https://api-v3.mbta.com/' + req).json()

def get_alerts(key, driver, route, time):
    driver.print_start()

    req_str = 'alerts'
    character = '?'

    if time != None:
        req_str += character + 'filter[datetime]=' + time
        character = '&'
    if key != None:
        req_str += character + 'api_key=' + key
        character = '&'
    if route != None:
        req_str += character + 'filter[route]=' + route
        character = '&'

    alerts = retrieve_from_api(req_str)
    for alert in alerts['data']:
        attributes = alert['attributes']
        title = ''
        description = ''
        date = attributes['created_at']
        effect = ''
        categories = []

        header = attributes['header']

        if attributes['description'] != None:
            desc = attributes['description']
        else:
            desc = ''

        if attributes['effect'] != None:
            effect = 'Effect: ' + attributes['effect']

        title=attributes['header']
        if len(title) > 100:
            title = title[:100]
            if title[99] == ' ':
                title = title[:98]
            title += '...'

        driver.print_item(title, header, desc, effect, date, categories)

    driver.print_end()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Pull down MBTA alerts and print them out')
    parser.add_argument('-k', '--key', help='set API key', metavar='APIKEY')
    parser.add_argument('-o', '--output', help='set output format', metavar='OUTFMT')
    parser.add_argument('-r', '--routes', help='set route list', metavar='ROUTELIST')
    parser.add_argument('-t', '--time', help='set time to check alerts for', metavar='TIME')
    parser.add_argument('-T', '--title', help='set output title', metavar='TITLE')
    parser.add_argument('-D', '--description', help='set output description', metavar='DESC')
    parser.add_argument('-U', '--url', help='set upstream URL', metavar='URL')
    args = parser.parse_args()
    key = args.key
    outfmt = args.output
    route = args.routes
    time = args.time
    title = DEFAULT_TITLE
    desc = DEFAULT_DESC
    url = DEFAULT_URL
    driver = None

    if args.title != None:
        title = args.title
    if args.description != None:
        desc = args.description
    if args.url != None:
        url = args.url

    if outfmt == None or outfmt == 'rss':
        driver = RSSDriver(title, desc, DEFAULT_LANG, url)
    elif outfmt == 'md':
        driver = MarkdownDriver(title, desc, DEFAULT_LANG, url)
    else:
        print("No such output driver.")
        exit(0)

    get_alerts(key, driver, route, time)
