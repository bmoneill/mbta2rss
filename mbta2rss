#!/usr/bin/env python3
# File: mbta2rss
# Description: This pulls down all the MBTA alerts and prints them out.
# Author: Ben O'Neill <ben@benoneill.xyz>
# Copyright: Copyright (C) 2019-2020 Ben O'Neill <benoneill.xyz>. Licensed under
# GNU GPL v3.

import argparse
import requests

def print_rss_channel_start(title='MBTA Unofficial Alert Feed',
        desc='An unofficial, gratis alert feed for MBTA riders.',
        lang='en-us', link='https://gitlab.com/swegbun/mbta-rss'):
    print('<?xml version="1.0" encoding="utf-8"?>')
    print('<?xml-stylesheet type="text/css" href="rss.css" ?>')
    print('<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">')
    print('<channel>')
    print('<title>' + title + '</title>')
    print('<link>' + link + '</link>')
    print('<description>' + desc + '</description>')
    print('<language>' + lang + '</language>') # FIXME does the API even support any other languages?

def print_rss_channel_end():
    print('</channel>')
    print('</rss>')

def print_rss_item(title='Title Placeholder', desc='Description Placeholder',
        date='', categories=''):
    print('<item>')
    print('<title>' + title + '</title>')
    print('<description><![CDATA[' + desc + ']]></description>')
    print('<pubDate>' + date + '</pubDate>')
    for category in categories:
        print('<category>' + category + '</category>')
    print('</item>')

def print_md_start(title='MBTA Unofficial Alert Feed',
        desc='An unofficial, gratis alert feed for MBTA riders.'):
    print('# ' + title)
    print(desc)

def print_md_item(title='Title Placeholder', desc='Description Placeholder',
        date='', categories=''):
    print('## ' + title + ' (' + date + ')' + '\n')
    print(desc + '\n\n')

def retrieve_from_api(req):
    return requests.get('https://api-v3.mbta.com/' + req).json()

def get_alerts(key, outfmt, route, time):
    req_str = 'alerts'
    character = '?'

    if time != None:
        req_str += character + 'filter[datetime]=' + time
        character = '&'
    if key != None:
        req_str += character + 'api_key=' + key
        character = '&'
    if route != None:
        req_str += character + 'filter[route]=' + route
        character = '&'

    alerts = retrieve_from_api(req_str)
    for alert in alerts['data']:
        attributes = alert['attributes']
        title = ''
        description = ''
        date = attributes['created_at']
        effect = ''
        categories = []
        affected_ledger = []
        route_affected = False # The route we want if route != '*'

        header = attributes['header']

        if attributes['description'] != None:
            description = attributes['description']
        else:
            description = ''

        if attributes['effect'] != None:
            effect = 'Effect: ' + attributes['effect']

        title=attributes['header']
        if len(title) > 100:
            title = title[:100]
            if title[99] == ' ':
                title = title[:98]
            title += "..."

        if outfmt == 'rss':
            print_rss_item(title, '<h2>' +  header + '</h2>' + '<h3>'
                    + description + '</h3>' + '<p>' + effect + '</p>', date, categories)
        elif outfmt == 'md':
            print_md_item(title, header + '\n\n' + description, date)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Pull down MBTA alerts and print them out')
    parser.add_argument('-k', '--key', help='set API key', metavar='APIKEY')
    parser.add_argument('-o', '--output', help='set output format', metavar='OUTFMT')
    parser.add_argument('-r', '--routes', help='set route list', metavar='ROUTELIST')
    parser.add_argument('-t', '--time', help='set time to check alerts for', metavar='TIME')
    args = parser.parse_args()
    key = args.key
    outfmt = args.output
    route = args.routes
    time = args.time

    if outfmt == None:
        outfmt = 'rss'

    if outfmt == 'rss':
        print_rss_channel_start()
    elif outfmt == 'md':
        print_md_start()

    get_alerts(key, outfmt, route, time)

    if outfmt == None or outfmt == 'rss':
        print_rss_channel_end()
